*.class
*.log

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*


# Simple Build Tool
# http://www.scala-sbt.org/release/docs/Getting-Started/Directories.html#configuring-version-control

dist/*
target/
lib_managed/
src_managed/
project/boot/
project/plugins/project/
.history
.cache
.lib/

# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm and Rider
# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839

# User-specific stuff
.idea/**/workspace.xml
.idea/**/tasks.xml
.idea/**/usage.statistics.xml
.idea/**/dictionaries
.idea/**/shelf

# AWS User-specific
.idea/**/aws.xml

# Generated files
.idea/**/contentModel.xml

# Sensitive or high-churn files
.idea/**/dataSources/
.idea/**/dataSources.ids
.idea/**/dataSources.local.xml
.idea/**/sqlDataSources.xml
.idea/**/dynamic.xml
.idea/**/uiDesigner.xml
.idea/**/dbnavigator.xml

# Gradle
.idea/**/gradle.xml
.idea/**/libraries

# Gradle and Maven with auto-import
# When using Gradle or Maven with auto-import, you should exclude module files,
# since they will be recreated, and may cause churn.  Uncomment if using
# auto-import.
# .idea/artifacts
# .idea/compiler.xml
# .idea/jarRepositories.xml
# .idea/modules.xml
# .idea/*.iml
# .idea/modules
# *.iml
# *.ipr

# CMake
cmake-build-*/

# Mongo Explorer plugin
.idea/**/mongoSettings.xml

# File-based project format
*.iws

# IntelliJ
out/

# mpeltonen/sbt-idea plugin
.idea_modules/

# JIRA plugin
atlassian-ide-plugin.xml

# Cursive Clojure plugin
.idea/replstate.xml

# SonarLint plugin
.idea/sonarlint/

# Crashlytics plugin (for Android Studio and IntelliJ)
com_crashlytics_export_strings.xml
crashlytics.properties
crashlytics-build.properties
fabric.properties

# Editor-based Rest Client
.idea/httpRequests

# Android studio 3.1+ serialized cache file
.idea/caches/build_file_checksums.ser

#
# Are you tempted to edit this file?
#
# First consider if the changes make sense for all,
# or if they are specific to your workflow/system.
# If it is the latter, you can augment this list with
# entries in .git/info/excludes
#
# see also test/files/.gitignore
#

#
# JARs aren't checked in, they are fetched by sbt
#
/lib/*.jar
/test/files/codelib/*.jar
/test/files/lib/*.jar
/test/files/speclib/instrumented.jar
/tools/*.jar

# Developer specific properties
/build.properties
/buildcharacter.properties

# might get generated when testing Jenkins scripts locally
/jenkins.properties

# target directory for build
/build/

# other
/out/
/bin/
/sandbox/

# intellij
/src/intellij*/*.iml
/src/intellij*/*.ipr
/src/intellij*/*.iws
**/.cache
/.idea
/.settings

# vscode
/.vscode

# Standard symbolic link to build/quick/bin
/qbin

# sbt's target directories
/target/
/project/**/target/
/test/macro-annot/target/
/test/files/target/
/test/target/
/build-sbt/
local.sbt
jitwatch.out

# Used by the restarr/restarrFull commands as target directories
/build-restarr/
/target-restarr/

# metals
.metals
.bloop
project/**/metals.sbt

.bsp
.history

*.DS_Store
*.class
*.tasty
*.log
*.swp
*~
tags

# sbt specific
dist/*
target/
lib_managed/
src_managed/
project/boot/
project/plugins/project/
project/local-plugins.sbt
.history
.ensime
.ensime_cache/
.sbt-scripted/
local.sbt

# npm
node_modules

# VS Code
.vscode/
# Metals
.bloop/
.metals/
metals.sbt

# idea
.idea
.idea_modules
/.worksheet/

# scala-cli
.scala-build
sbt-launch.jar

# Partest
dotty.jar
dotty-lib.jar
tests/partest-generated/
tests/locks/
/test-classes/

# Benchmarks
bench/tests-generated

# Ignore output files but keep the directory
out/
build/
!out/.keep
testlogs/

# Ignore build-file
.packages
/.cache-main
/.cache-tests

# Put local stuff here
local/
compiler/test/debug/Gen.jar

/bin/.cp

before-pickling.txt
after-pickling.txt
bench/compile.txt

community-build/scala3-bootstrapped.version
community-build/sbt-injected-plugins
community-build/sbt-dotty-sbt
community-build/sbt-scalajs-sbt
community-build/dotty-community-build-deps

# Vulpix output files
*.check.out
!/dist/bin/

# semanticdb test output files
*.expect.scala.out
*.expect.out

# Bloop
.bsp

# Coursier
cs

# Coursier test product
compiler/test-coursier/run/*.jar

# docs related
contributors.js
content-contributors.css
docs/_spec/_site/
docs/_spec/.jekyll-metadata

# scaladoc related
scaladoc/output/